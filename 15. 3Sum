class Solution //2 pointers solution
{
public:
    std::vector<std::vector<int>> threeSum(std::vector<int> &nums)
    {
        std::vector<std::vector<int>> vec;
        std::sort (nums.begin(), nums.end());
        int n = nums.size();

        for (int i = 0; i < n; i++)
        {
            if (i != 0 && nums[i] == nums[i - 1]) continue;  // skip duplicates
            int left = i + 1;
            int right = n - 1;

            while (left < right)
            {
                int sum = nums[i] + nums[left] + nums[right];

                if (sum > 0)        // sum too big - move right ot he left
                {
                    right--;
                }
                else if (sum < 0)   // sum too small - move left to the right
                {
                    left++;
                }
                else
                {
                    vec.push_back(std::vector<int>{nums[i], nums[left], nums[right]});
                    while (nums[left] == nums[left + 1]) left++;        // skip duplicates for left       
                    while (nums[right] == nums[right - 1]) right--;     // skip duplicates for right
                    
                    left++;
                    right--;
                }
            }
        }
        return vec;
    }
};
