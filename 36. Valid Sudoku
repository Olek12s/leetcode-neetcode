class Solution
{
public:
    bool isValidSudoku(vector<vector<char>>& board)
    {
        int rowCount = board.size();
        int colCount = board[0].size();
        std::set<int> rows[rowCount];
        std::set<int> cols[colCount];
        std::set<int> boxes[rowCount];   // assuming board is a square

        for (int i = 0; i < rowCount; i++)
        {
            for (int j = 0; j < colCount; j++)
            {
                if (board[i][j] != '.') // if tile is not considered as empty
                {
                    int value = board[i][j] - '0';
                    int index = (i / 3) * 3 + (j / 3);

                    if (rows[i].count(value) || cols[j].count(value) || boxes[index].count(value))
                    {
                        return false;
                    }
                    rows[i].insert(value);
                    cols[j].insert(value);
                    boxes[index].insert(value);
                }
            }
        }
        return true;    // valid sudoku
    }
};
